API - defines a set of definitions and protocols that enable two software components to communicate with each other
- e.g. Representational State Transfer (REST) APIs
- defines a set of functions like GET, PUT, DELETE, etc. that clients can use to request for server data.
- clients and servers exchange data useing HyperText Transfer Protocol (HTTP)
- clients send requests and servers reply with responses
middleware - software that different applications use to communicate wtih each other
authentication - verifying that user email and password matches
authorisation - verifying that user has access to protected content
encoded - information encoded with a known key
encrypted - information encrypted with a secret key
JWT - SIGNATURE ensures (1) token information not tempered with, and (2) token issued with SERVER secret key

Server --> Route --> (Middleware) --> Controller --> API Slice --> Data Slice --> Component
(<------------------backend------------------->)     (<-------------frontend------------->)

setting up frontend folder
- "npm create-react-app frontend" in root folder
- "init git" in root folder
- delete .git in frontend folder
- move .gitignore to root folder
- add .env to .gitignore
- remove / from /node_modules in .gitignore
- "npm install axios" in frontend folder
- add "http://localhost:5000" proxy to frontend package.json

setting up backend folder
- "npm init" in root folder
- entry point: server.js
- add "type": "module" to root package.json
- "npm install express" in root folder
- "npm install nodemon concurrently" in root folder
- add "server": "nodemon backend/server.js" to scripts in root package.json
- add "client": "npm start --prefix frontend", to scripts in root package.json
- add "dev": "concurrently \"npm run server\" \"npm run client\"" to scripts in root package.json
- "npm install dotenv" in root folder
- add .env file in root folder
- add environment variables to root .env

connecting mongodb
- connect database to application
- add database URI to .env
- add password and database name to URI
- "npm install mongoose" in root folder
- create config folder in backend folder
- add db.js with database connect async function
- call function in server.js

setting up postman
- create workspace
- create new environment
- add base URL (i.e. backend proxy)
- create new API
- add a collection
- add request in collection
- set Params if required (e.g. {{baseURL}}/users/:id)
- set Body if required in x-www-form-urlencoded (i.e. key-value pairs)
- clear cookies if required to verify unauthorised access (under Send button)

setting up redux/redux toolkit
- "npm install @reduxjs/toolkit react-redux" in frontend folder

chrome devtools
- local storage: Application > Local storage
- cookies: Application > Cookies
- install react developer tools
- install redux devtools

paypal developer
- Apps & Credentials > Create App
- add Client ID to .env file in frontend folder
- set up paypal configuration in server.js file in backend folder
- "npm install @paypal/react-paypal-js" in frontend folder
- add paypal script provider in index.js file in frontend folder
- select Testing Tools (beside Apps & Credentials header) to retrieve sandbox account information 
- switch from Sandbox to Live when in production

deployment preparation (render)
- see commit "deployment preparation"
- create new Web Service on Render
- "npm run build" (ensure build script exists) under Build Command
- "npm run start" (ensure start script exists) under Start Command
- add MongoDB, JWT, and PayPal Environment Variables
- Connect > Outbound > copy IP address(es) in Render
- Security > Network Access > IP Access List > add IP addess(es) in MongoDB
